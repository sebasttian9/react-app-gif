{"version":3,"sources":["components/AddCategory.jsx","funciones/getGif.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","console","log","trim","length","cat","type","value","onChange","target","GetGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_large","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","g","GifExprtApp","categories","setcategories","onClick","cats","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OAEI,uBAAMC,SAXW,SAACC,GAEdA,EAAEC,iBACFC,QAAQC,IAAI,gBACbN,EAAWO,OAAOC,OAAS,IAC1BV,GAAc,SAAAW,GAAG,OAAKT,GAAL,mBAAmBS,OACpCR,EAAc,MAKlB,UACI,8CACA,uBACIS,KAAK,OACLC,MAAUX,EACVY,SAtBc,SAACT,GAGnBF,EAAcE,EAAEU,OAAOF,c,+BCXtBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,gBAAgBZ,QAVtB,kBAaRM,GAbQ,4CAAH,sDCYLO,EAZK,SAAC,GAAqB,EAAnBJ,GAAoB,IAAjBC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAI5B,OACI,sBAAKc,UAAU,6CAAf,UACG,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCHHO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAEvB,ECHwB,SAAEA,GAE1B,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAW,IAFf,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAfAC,qBAAU,WAENxB,EAASC,GACRwB,MAAM,SAAAd,GAECY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAKvB,CAACpB,IAGIqB,EDpBuBI,CAAczB,GAAhCa,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAGnB,OACI,qCACA,oBAAIJ,UAAU,6CAAd,SAA4DhB,IAC1DoB,GAAW,mBAAGJ,UAAU,wCAAb,qBACb,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAAAiB,GAAC,OAEL,cAAC,EAAD,eAEWA,GADAA,EAAEf,aEsBrBgB,EApCK,WAGhB,MAAoC3C,mBAAS,CAAC,gBAA9C,mBAAO4C,EAAP,KAAmBC,EAAnB,KAQA,OAEI,qCACI,2CACA,uBAEA,wBAAQC,QAZE,WAGdD,GAAe,SAAAE,GAAI,4BAAQA,GAAR,CAAa,cAS5B,qBACA,cAAC,EAAD,CAAahD,cAAkB8C,IAC/B,6BAEID,EAAWnB,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEGA,SAAUA,GADLA,YChBVgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.f18e9ed3.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n\r\n    const handleInputChange = (e) => {\r\n\r\n            // console.log();\r\n            setinputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n\r\n            e.preventDefault();\r\n            console.log('Submit hecho');\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cat => [inputValue,...cat]);\r\n            setinputValue('');\r\n        }\r\n    }\r\n    return (\r\n        \r\n        <form onSubmit={ handleSubmit }>\r\n            <h2>Add Category</h2>\r\n            <input \r\n                type=\"text\"\r\n                value = { inputValue }\r\n                onChange = {handleInputChange}\r\n            />\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\n// para validar que se reciba siempre el setcategory\r\nAddCategory.propTypes = { \r\n    setCategories : PropTypes.func.isRequired\r\n}","export const GetGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=eYwnxL5nsBA44lGJtwyi6S8JU7SL4uMd`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_large.url\r\n        }\r\n    });\r\n        return gifs;\r\n    }    \r\n\r\n\r\n\r\n    ","const GifGridItem = ( {id,title,url} ) => {\r\n\r\n    // console.log(id, title, url);\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeInLeft'>\r\n           <img src={ url } alt={ title }></img>\r\n           <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React, {} from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    const {data:images,loading} = useFetchGifs( category );\r\n    \r\n\r\n    return (\r\n        <>\r\n        <h3 className='card animate__animated animate__fadeInLeft'>{category}</h3>\r\n        { loading && <p className='card animate__animated animate__flash'>Loading</p>}\r\n        <div className='card-grid'>\r\n           \r\n            {\r\n                images.map(g =>\r\n                    (\r\n                       <GifGridItem \r\n                             key={g.id} \r\n                             { ...g }\r\n                        />\r\n                    )\r\n                )\r\n            }\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { GetGifs } from '../funciones/getGif';\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading  : true\r\n    })\r\n\r\n\r\n    useEffect(()=>{\r\n\r\n        GetGifs( category )\r\n        .then( img =>{\r\n            \r\n                setstate({\r\n                    data: img,\r\n                    loading: false\r\n                })\r\n\r\n        })\r\n\r\n    },[category])\r\n\r\n\r\n    return state;\r\n}","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n\r\nconst GifExprtApp = () => {\r\n\r\n    // const categories = ['One Punch','Samurai X','Dragon Ball'];\r\n    const [categories, setcategories] = useState(['Dragon Ball'])\r\n\r\n    const handleAdd = () => {\r\n\r\n        // setcategories([...categories,'Paula']);\r\n        setcategories( cats => [...cats,'Paula']); // obtiene el estado anterior del array (cat)\r\n    }\r\n\r\n    return (\r\n\r\n        <>\r\n            <h2>Hola seba</h2>\r\n            <hr></hr>\r\n\r\n            <button onClick={handleAdd}>Agregar</button>\r\n            <AddCategory setCategories = { setcategories }/>\r\n            <ol>\r\n            {\r\n                categories.map(category =>  \r\n                (<GifGrid\r\n                    key={category} \r\n                    category={category} />)\r\n                )\r\n            }\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\nexport default GifExprtApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExprtApp from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExprtApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}